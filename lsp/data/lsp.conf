# The global configuration file, accessible through Tools->LSP Client->Global Configuration,
# defines default values for various configuration options.
#
# When accessing the user configuration file using Tools->LSP Client->User Configuration,
# a copy of the global configuration file is created in user's configuration directory
# in which one can override various settings from the global configuration file.
#
# In addition, one can create a project-wide configuration file used for a single
# project or shared by multiple projects whose path can be specified under
# Project->Properties->LSP Client->Configuration file. When such a file is defined
# and the project is configured to use the project configuration, this configuration
# file overrides the global configuration instead of the user configuration file.
#
# Each configuration file may contain the [all] section which contains settings
# common for all language servers, and several filetype-specific sections
# containing settings specific for the given filetype. The names of these sections
# are identical to the names defined in Tools->Configuration Files->filetype_extensions.conf;
# for instance [Python] for the Python programming language (case sensitive).
# Most of the options can appear both in the [all] section and the filetype-specific
# sections except for a few that make only sense in the filetype-specific section,
# like e.g. the 'cmd' option containing the command that starts the server. Any
# option defined in the filetype-specific section overrides the option defined
# in the [all] section for that particular language server.
#
# Not all LSP features are supported by all LSP servers. To learn more about what
# features are supported by the particular server you are trying, you can check
# the result of the initial client-server handshake by going to
# Tools->LSP Client->Server Initialize Responses (the server must be running
# to see any result).
#
# All servers are automatically restarted when any of the configuration files
# changes. Servers are started lazily after a tab is switched to a document for
# which a server is configured (this means that restart typically means shutdown
# of all servers after which they are started as needed).


[all]
# Defines whether the server should be used when no project is open. Servers
# may not work correctly without a project because most of them need to know
# the path to the project directory which corresponds to the path defined under
# Project->Properties->Base path
use_without_project=false
# Defines whether the server should be used for files whose path isn't within
# the project directory
use_outside_project_dir=false

# When the filetype-specific 'rpc_log' settings is defined (see the Python section),
# this option specifies whether the log should contain all details including method
# parameters, or just the method name and type of the communication
rpc_log_full=false
# Show server's stderr in Geany's stderr (when started from terminal)
show_server_stderr=false

# Whether LSP should be used for autocompletion
autocomplete_enable=true
# Servers return the label that can be shown in the autocompletion popup for individual
# autocompletion entries, or it is possible to use just the text that gets
# inserted when selecting the entry
autocomplete_use_label=false
# Maximum number of autocompletion entries shown in the popup window (including
# those that will only get visible after scrolling the contents)
autocomplete_window_max_entries=20
# Maximum number of autocompletion entries shown without scrolling (defining the
# actual height of the popup)
autocomplete_window_max_displayed=8
# The maximum width of the autocompletion popup in pixels
autocomplete_window_max_width=200
# Whether to automatically apply additional edits defined for the autocompletion
# entry. These are typically imports of the modules where the inserted dymbol is
# defined
autocomplete_apply_additional_edits=false

# Whether LSP should be used to display diagnostic messages. Typically these are
# compiler errors or warnings
diagnostics_enable=true
# Defines the style of error diagnostics - visual style such as underline, and its
# color.
# The first number is the "indicator index" of Scintilla - each style should have
# a unique value from 8 to 31. Can be changed when the value clashes with some
# other plugin.
# The remaining values correspond to
# SCI_INDICSETFORE; SCI_INDICSETALPHA; SCI_INDICSETOUTLINEALPHA; SCI_INDICSETSTYLE
# - see Scintilla documentation for more information
diagnostics_error_style=13;#ff3030;70;255;1
# Defines the style of warning diagnostics
diagnostics_warning_style=14;#ee00ee;70;255;1
# Defines the style of information diagnostics
diagnostics_info_style=15;#909090;70;255;14
# Defines the style of hint diagnostics
diagnostics_hint_style=16;#909090;70;255;14

# Whether LSP should be used to show a popup with details when hovering over symbols.
# Slightly annoying so disabled by default.
hover_enable=false
# Maximum number of lines of the popup window
hover_popup_max_lines=20
# Maximum number of paragraphs shown in the popup window
hover_popup_max_paragraphs=1000

# Whether LSP should be used to show function parameter signatures e.g. after
# typing '('
signature_enable=true

# Whether LSP should be used for going to symbol definition/declaration
goto_enable=true

# Whether LSP should be used for displaying symbols in the sidebar. At the moment
# there is no Geany support for this feature so it can be left disabled as it does
# not work anyway.
document_symbols_enable=false

# Whether LSP should be used for highlighting semantic tokens in the editor, such
# as types. Most servers don't support this feature so disabled by default.
semantic_tokens_enable=false
# When commented-out, Scintilla indicators are used for highlighting semantic token types.
# See diagnostics_error_style for more details.
#semantic_tokens_type_style=17;#000090;255;255;17
# When not using semantic_tokens_type_style, this indicates the index in the
# Scintilla lexer used for custom keywords that are used to colorize types. This
# feature is supported only by some lexers like C/C++ and derived lexers.
semantic_tokens_lexer_kw_index=3

# Whether LSP should be used for highlighting all other uses of a variable under
# cursor.
highlighting_enable=true
# Indicator style used for highlighting - see diagnostics_error_style
highlighting_style=18;#b0b0b0;90;255;8

# Whether LSP should be used for for "code lenses" showing commands available
# for the given line. After right-clicking the line with the code lens, these
# commands are available in the Commands submenu.
code_lens_enable=true
# Defines the foreground and the background color of the code lens indicator.
code_lens_style=#000000;#ffff00


# This is a dummy language server configuration describing the available
# language-specific options
[DummyLanguage]
# The command (including parameters) used to start the LSP server. Instead of
# starting a new server, it is also possible to reuse other language's server
# using the 'use' option - see the C++ configuration
cmd=srvcmd
# The server can be started with additional environment variables (such as foo
# with the value bar, and foo1 with the value bar1 like in the example below).
env=foo=bar;foo1=bar1
# File containing initialization options of the server.
initialization_options_file=/home/some_user/init_options.json
# When defined, performs logging to the specified file where all RPC communication
# between the client plugin and the server will be stored (can also be 'stdout'
# or 'stderr')
rpc_log=stdout
# Semicolon separated list of character sequences which can trigger autocompletion.
# Normally, the server defines these but this option can be used to further restrict
# the list only to some sequences if the server-provided value does not work well.
autocomplete_trigger_sequences=.;->
# JSON file containing formatting options defined in
# https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#formattingOptions
# containing e.g. { "tabSize": 4, "insertSpaces": false }. Supported only by some
# language servers.
formatting_options_file=/home/some_user/my_formatting_config_file.json
# Additional files and their mappings to LSP language IDs for which the server
# is used as well. The Nth item in the list is always a LSP language ID and the
# (N+1)th item is a glob pattern for which the language ID is used
lang_id_mappings=dummylanguage;*.dummy


[C]
# Comment out the line below to start using the server
#cmd=clangd
semantic_tokens_enable=true
autocomplete_trigger_sequences=.;::;->;->*
#formatting_options_file=/home/some_user/my_formatting_config_file.json
#rpc_log=stdout
#rpc_log_full=false
#show_server_stderr=true


[C++]
# Don't start a new server but reuse the server defined for some other language
# instead (C server used for C++ in this case)
use=C


[Go]
# Comment out the line below to start using the server
#cmd=gopls
autocomplete_apply_additional_edits=true
lang_id_mappings=go.mod;go.mod;go.sum;go.sum;gotmpl;*tmpl
#rpc_log=stdout
#rpc_log_full=false
#show_server_stderr=true


[Python]
# Comment out the line below to start using the server
#cmd=pylsp
use_outside_project_dir=true
use_without_project=true
#initialization_options_file=/home/some_user/pylsp.json
#rpc_log=stdout
#rpc_log_full=false
#show_server_stderr=true


# TODO: help needed! Only the above defined language servers have been tested
# (lightly). If you know some other working language server or find a problem
# with the settings above, please open an issue report or a pull request
# on Github.
